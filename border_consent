import { useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { ShieldCheck, Search, CheckCircle2 } from "lucide-react";

/**
 * Border Consent • Visitor App (Mock FHIR)
 * Goal: A simple app a traveler can download to pre-consent sharing of medical info
 * required for emergency care while in the country.
 *
 * Required: Passport Number, Full Name, Date of Birth, Country of Citizenship.
 * Optional: Insurance Provider & Number, Dual Citizenship + Records Origin Country.
 *
 * Output behavior (per user request):
 * - No JSON/output viewer and no on-screen test list.
 * - Perform input validation; on successful submit, show a confirmation dialog with a tick.
 */

// ----------------------- Expanded country list (ISO-3166 alpha-2) ------
const COUNTRIES = [
  { code: "NZ", label: "New Zealand" },
  { code: "GB", label: "United Kingdom" },
  { code: "AU", label: "Australia" },
  { code: "FJ", label: "Fiji" },
  { code: "IN", label: "India" },
  { code: "US", label: "United States" },
  { code: "CA", label: "Canada" },
  { code: "CN", label: "China" },
  { code: "JP", label: "Japan" },
  { code: "KR", label: "South Korea" },
  { code: "SG", label: "Singapore" },
  { code: "MY", label: "Malaysia" },
  { code: "TH", label: "Thailand" },
  { code: "PH", label: "Philippines" },
  { code: "ID", label: "Indonesia" },
  { code: "VN", label: "Vietnam" },
  { code: "LK", label: "Sri Lanka" },
  { code: "BD", label: "Bangladesh" },
  { code: "PK", label: "Pakistan" },
  { code: "AE", label: "United Arab Emirates" },
  { code: "SA", label: "Saudi Arabia" },
  { code: "QA", label: "Qatar" },
  { code: "KW", label: "Kuwait" },
  { code: "ZA", label: "South Africa" },
  { code: "NG", label: "Nigeria" },
  { code: "EG", label: "Egypt" },
  { code: "KE", label: "Kenya" },
  { code: "DE", label: "Germany" },
  { code: "FR", label: "France" },
  { code: "ES", label: "Spain" },
  { code: "IT", label: "Italy" },
  { code: "PT", label: "Portugal" },
  { code: "NL", label: "Netherlands" },
  { code: "BE", label: "Belgium" },
  { code: "SE", label: "Sweden" },
  { code: "NO", label: "Norway" },
  { code: "DK", label: "Denmark" },
  { code: "FI", label: "Finland" },
  { code: "CH", label: "Switzerland" },
  { code: "AT", label: "Austria" },
  { code: "PL", label: "Poland" },
  { code: "CZ", label: "Czechia" },
  { code: "HU", label: "Hungary" },
  { code: "RO", label: "Romania" },
  { code: "GR", label: "Greece" },
  { code: "TR", label: "Türkiye" },
  { code: "IE", label: "Ireland" },
  { code: "MX", label: "Mexico" },
  { code: "BR", label: "Brazil" },
  { code: "AR", label: "Argentina" },
  { code: "CL", label: "Chile" },
  { code: "CO", label: "Colombia" },
].sort((a, b) => a.label.localeCompare(b.label, 'en', { sensitivity: 'base' }));

// ----------------------- Helpers: FHIR builders -------------------------
function parseFullName(fullName) {
  const parts = (fullName || "").trim().split(/\s+/).filter(Boolean);
  const family = parts.length ? parts[parts.length - 1] : "";
  const given = parts.length > 1 ? parts.slice(0, -1) : parts;
  return { family, given };
}

function buildPatient({ id, fullName, dobISO, passport, citizenCountryCode, recordsOriginCountryCode }) {
  const { family, given } = parseFullName(fullName);
  if (!passport) throw new Error("Passport number required");
  if (!dobISO) throw new Error("DOB required");
  if (!family && given.length === 0) throw new Error("Full name required");
  if (!citizenCountryCode) throw new Error("Country of citizenship required");

  const patient = {
    resourceType: "Patient",
    id,
    identifier: [{ system: "urn:govhack:passport", value: passport }],
    name: [{ use: "official", family, given }],
    birthDate: dobISO,
    address: [{ country: citizenCountryCode }],
  };

  // Nationality extension
  patient.extension = [
    {
      url: "http://hl7.org/fhir/StructureDefinition/patient-nationality",
      valueCodeableConcept: {
        coding: [{ system: "urn:iso:std:iso:3166", code: citizenCountryCode }],
        text: citizenCountryCode,
      },
    },
  ];

  // Records origin country (dual citizen scenario)
  if (recordsOriginCountryCode) {
    (patient.extension ||= []).push({
      url: "urn:govhack:records-origin-country",
      valueCoding: { system: "urn:iso:std:iso:3166", code: recordsOriginCountryCode },
    });
  }

  return patient;
}

function buildConsent({ patientId, startISO, purpose = "TREAT", recordsOriginCountryCode }) {
  // Emergency care requires broad access – major categories included by default
  const provisionClass = [
    { system: "http://terminology.hl7.org/CodeSystem/v3-ActCode", code: "ALLER" },
    { system: "http://terminology.hl7.org/CodeSystem/v3-ActCode", code: "MEDLIST" },
    { system: "http://terminology.hl7.org/CodeSystem/v3-ActCode", code: "IMMUNIZ" },
  ];
  const consent = {
    resourceType: "Consent",
    status: "active",
    scope: { coding: [{ system: "http://terminology.hl7.org/CodeSystem/consentscope", code: "patient-privacy" }] },
    category: [{ coding: [{ system: "http://loinc.org", code: "59284-0", display: "Patient Consent" }] }],
    patient: { reference: `Patient/${patientId}` },
    provision: {
      type: "permit",
      period: { start: startISO },
      purpose: [{ coding: [{ system: "http://terminology.hl7.org/CodeSystem/v3-ActReason", code: purpose }] }],
      class: provisionClass,
    },
  };

  if (recordsOriginCountryCode) {
    consent.extension = [
      { url: "urn:govhack:records-origin-country", valueCoding: { system: "urn:iso:std:iso:3166", code: recordsOriginCountryCode } },
    ];
  }
  return consent;
}

function buildCoverage({ patientId, insuranceProvider, insuranceNumber }) {
  if (!insuranceProvider && !insuranceNumber) return null; // optional
  return {
    resourceType: "Coverage",
    id: `cov-${patientId}`,
    status: "active",
    beneficiary: { reference: `Patient/${patientId}` },
    subscriberId: insuranceNumber || undefined,
    payor: insuranceProvider ? [{ display: insuranceProvider }] : undefined,
  };
}

// ----------------------- UI bits ---------------------------------------
function Row({ label, children, helper }) {
  return (
    <div className="grid grid-cols-12 gap-3 items-center">
      <Label className="col-span-4 text-sm text-gray-600">{label}</Label>
      <div className="col-span-8 flex items-center gap-2">{children}</div>
      {helper && <p className="col-span-12 text-xs text-gray-500 mt-1">{helper}</p>}
    </div>
  );
}

export default function BorderConsentApp() {
  // Identity inputs
  const [passport, setPassport] = useState("");
  const [fullName, setFullName] = useState("");
  const [dob, setDob] = useState(""); // yyyy-mm-dd

  // Country & medical records origin
  const [citizenCountry, setCitizenCountry] = useState("");
  const [dualCitizen, setDualCitizen] = useState(false);
  const [recordsOriginCountry, setRecordsOriginCountry] = useState("");

  // Insurance (optional)
  const [insuranceProvider, setInsuranceProvider] = useState("");
  const [insuranceNumber, setInsuranceNumber] = useState("");

  // Agreement & status
  const [agree, setAgree] = useState(false);
  const [error, setError] = useState("");
  const [submitted, setSubmitted] = useState(false);
  const [showDialog, setShowDialog] = useState(false);

  const startISO = useMemo(() => new Date().toISOString().slice(0, 10), []);

  const countryOk = citizenCountry && (!dualCitizen || recordsOriginCountry);
  const canCreate = passport.trim() && fullName.trim() && dob.trim() && agree && countryOk;

  function validateInputs() {
    // Extra validation beyond button gating
    const today = new Date().toISOString().slice(0, 10);
    if (!passport.trim()) return "Passport number required";
    if (!fullName.trim()) return "Full name required";
    if (!dob.trim()) return "Date of birth required";
    if (dob > today) return "Date of birth cannot be in the future";
    if (!citizenCountry) return "Country of citizenship required";
    if (dualCitizen && !recordsOriginCountry) return "Select medical records country";
    return "";
  }

  function handleCreate() {
    setError("");
    setSubmitted(false);
    const v = validateInputs();
    if (v) { setError(v); return; }

    try {
      const patientId = `pat-${(passport || "temp").replace(/[^a-zA-Z0-9]/g, "").toLowerCase()}`;
      const recordsCountry = dualCitizen ? recordsOriginCountry : citizenCountry;

      // Build resources (not displayed, but ensures we truly have a valid payload)
      const patient = buildPatient({
        id: patientId,
        fullName,
        dobISO: dob,
        passport,
        citizenCountryCode: citizenCountry,
        recordsOriginCountryCode: recordsCountry !== citizenCountry ? recordsCountry : undefined,
      });
      const consent = buildConsent({ patientId, startISO, purpose: "TREAT", recordsOriginCountryCode: recordsCountry });
      const coverage = buildCoverage({ patientId, insuranceProvider, insuranceNumber });
      void patient; void consent; void coverage; // silence unused warnings

      setSubmitted(true);
      setShowDialog(true);
    } catch (e) {
      setError(e.message || String(e));
    }
  }

  return (
    <div className="min-h-screen w-full bg-white p-6">
      <div className="max-w-[880px] mx-auto space-y-6" aria-live="polite">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-semibold">Border Consent App</h1>
          <Badge variant="secondary">Mock Prototype</Badge>
        </div>

        {/* Identity */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Search className="w-4 h-4"/> Identity</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Row label="Passport number">
              <Input value={passport} onChange={(e) => setPassport(e.target.value)} placeholder="e.g., UK1234567" />
            </Row>
            <Row label="Full name">
              <Input value={fullName} onChange={(e) => setFullName(e.target.value)} placeholder="e.g., Alex James Doe" />
            </Row>
            <Row label="Date of birth">
              <Input type="date" value={dob} onChange={(e) => setDob(e.target.value)} />
            </Row>
            <Row label="Country of citizenship">
              <select className="border rounded-md p-2 w-full" value={citizenCountry} onChange={(e) => setCitizenCountry(e.target.value)}>
                <option value="">Select country…</option>
                {COUNTRIES.map(c => <option key={c.code} value={c.code}>{c.label}</option>)}
              </select>
            </Row>
            <Row label="Dual citizen?">
              <Switch checked={dualCitizen} onCheckedChange={setDualCitizen} />
            </Row>
            {dualCitizen && (
              <Row label="Medical records country">
                <select className="border rounded-md p-2 w-full" value={recordsOriginCountry} onChange={(e) => setRecordsOriginCountry(e.target.value)}>
                  <option value="">Select country…</option>
                  {COUNTRIES.map(c => <option key={c.code} value={c.code}>{c.label}</option>)}
                </select>
              </Row>
            )}
          </CardContent>
        </Card>

        {/* Insurance (optional) */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><ShieldCheck className="w-4 h-4"/> Insurance (optional)</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Row label="Insurance provider">
              <Input value={insuranceProvider} onChange={(e) => setInsuranceProvider(e.target.value)} placeholder="e.g., Bupa UK" />
            </Row>
            <Row label="Insurance number">
              <Input value={insuranceNumber} onChange={(e) => setInsuranceNumber(e.target.value)} placeholder="e.g., INS‑123456" />
            </Row>
          </CardContent>
        </Card>

        {/* Consent (no category toggles) */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><ShieldCheck className="w-4 h-4"/> Consent</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-700">
              In emergencies, treating clinicians may need access to your medical information (e.g., allergies, medications, immunizations
              and related clinical data). By agreeing below, you authorise access for healthcare purposes while in the country.
            </p>
            <Separator />
            <div className="flex items-center gap-3">
              <Switch checked={agree} onCheckedChange={setAgree} />
              <span className="text-sm">I agree to share my medical information for healthcare purposes while in the country.</span>
            </div>
            <div className="flex items-center gap-2">
              <Button disabled={!canCreate} onClick={handleCreate}>Submit Consent</Button>
              {!canCreate && <span className="text-xs text-gray-500">Fill identity, select country{dualCitizen ? " & records country" : ""}, and accept to continue</span>}
              {error && <span className="text-xs text-red-600">{error}</span>}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Confirmation Dialog */}
      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <CheckCircle2 className="w-5 h-5" /> Consent submitted
            </DialogTitle>
            <DialogDescription>
              Consent has been created for <strong>{fullName || "visitor"}</strong> (passport {passport || "—"}).
              Clinicians will be able to view your medical information for emergency care while in the country.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end mt-4">
            <Button onClick={() => setShowDialog(false)}>Done</Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

// ----------------------- Types (JSDoc placeholder) ----------------------
// This file intentionally keeps types minimal to avoid build friction in the canvas.
// In a full app, use a FHIR TypeScript schema or zod parsers for resource validation.
